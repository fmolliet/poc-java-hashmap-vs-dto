<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DTO" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-206537064">PROTOCOL</stringProp>
            <stringProp name="-937580831">BASE_URL</stringProp>
            <stringProp name="2461825">PORT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1800854097">
              <stringProp name="2228360">HTTP</stringProp>
              <stringProp name="-1204607085">localhost</stringProp>
              <stringProp name="1716208">8080</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DTO Big Payload" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;chave&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;teste&quot;: &quot;100001&quot;,&#xd;
	&quot;1&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;2&quot;:&quot;TESTE&quot;,&#xd;
	&quot;3&quot;:&quot;TESTE&quot;,&#xd;
	&quot;4&quot;:&quot;TESTE&quot;,&#xd;
	&quot;5QUEBRAR&quot;:&quot;TESTE&quot;,&#xd;
	&quot;5&quot;:&quot;TESTE&quot;,&#xd;
	&quot;6RAQUEBRAR&quot;:&quot;TESTE&quot;,&#xd;
	&quot;6&quot;:&quot;TESTE&quot;,&#xd;
	&quot;7&quot;:&quot;TESTE&quot;,&#xd;
	&quot;8&quot;:&quot;TESTE&quot;,&#xd;
	&quot;9&quot;:&quot;TESTE&quot;,&#xd;
	&quot;10RAQUEBRAR&quot;:&quot;TESTE&quot;,&#xd;
	&quot;11&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;12&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;13&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;14&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;15&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;16&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;17&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;18&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;19&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;20&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;21&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;22&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/dto</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DTO" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;chave&quot;: &quot;LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0NCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBcVpFb0VCR084SXdjL1V4a2ZFY1kNCitic29NdmJ0eVdySXBWQndOTXNIOFM4UEl5b3hjYmJVMGVzYTVvVk5lM0ViWlIyaGtnd0pxTW9wZ3JDUHFVd1MNCjN3SVpwc0VPODVIcTRPMy9lTjlrZ1RpcUhHQS9ZNzhTMkNEVU80R0N0Uk9veWxxTnhTMHFUQW4ycWN1K1RtMGsNCmY2NnNGSTI2SnlGdHowWDZVZUI2RCtxM1FRT01RNzRad1dTMFpVVUZJYU1ITUtJdDlJK1BLeExNYlpPTE52dXQNCmtSN0ZSMkVBaGFQck1SNEFmMm9Cc0dqQXpjdlpPNFZEV3VSRmdRaHEvS2RYVW9YRytmT29oeWd6MGlWSG83TkINCi8vd2k5RllVS3NMUks5N25QWlp2V1pVY242bGl2S2F0N2dsOGRBUmtpNEdDNjk1Z1BlcnZIOUNxMzZRMXRscWkNCnI5aTNXbHFBcjA5YWtOZGNnWmR6NGJZUUMyelJtZ1hJb1JzZXR1cnZxVHBpS2gwQytHQjVEOURPOEc0VjdvOWENCmpmc04zOUV1aDkvUFhjWHh4WmR0RGZncWViY3dlekJyeW9ITUhha3RQVU5QeUhEUDZJSkdxMTY4L0JUNHVBTDcNCnB1NEE4cHBqVjNYU2VjbUpwQ0JQTTJSU2VnV0JOWWZ3Vmp3amdjc3IwQzc3Rmo1Q0FQRExPK0NZazB5ajloSXoNCjVCUlhLSG0vVjBJOXh0d3BFRWNFYlplcXdaZXZ6UlVkczVzWnZZVnV5bkRyVElNc2RLNGFSenRPTTcyRnJBUVoNCklkU29Ic2xucE5NSGY2YjN4Q2NkSW8zZ1g3YjVLL1lXZ1hIY1FNcE1PdDJlUHBybytDaUlHRDlyYmttakJsdGENCjJpUkJpU1BCUG9vZURwalVlV1g0TXYwQ0F3RUFBUT09DQotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0NCgotLS0tLUJFR0lOIFJTQSBQUklWQVRFIEtFWS0tLS0tDQpNSUlKS0FJQkFBS0NBZ0VBcVpFb0VCR084SXdjL1V4a2ZFY1krYnNvTXZidHlXcklwVkJ3Tk1zSDhTOFBJeW94DQpjYmJVMGVzYTVvVk5lM0ViWlIyaGtnd0pxTW9wZ3JDUHFVd1Mzd0lacHNFTzg1SHE0TzMvZU45a2dUaXFIR0EvDQpZNzhTMkNEVU80R0N0Uk9veWxxTnhTMHFUQW4ycWN1K1RtMGtmNjZzRkkyNkp5RnR6MFg2VWVCNkQrcTNRUU9NDQpRNzRad1dTMFpVVUZJYU1ITUtJdDlJK1BLeExNYlpPTE52dXRrUjdGUjJFQWhhUHJNUjRBZjJvQnNHakF6Y3ZaDQpPNFZEV3VSRmdRaHEvS2RYVW9YRytmT29oeWd6MGlWSG83TkIvL3dpOUZZVUtzTFJLOTduUFpadldaVWNuNmxpDQp2S2F0N2dsOGRBUmtpNEdDNjk1Z1BlcnZIOUNxMzZRMXRscWlyOWkzV2xxQXIwOWFrTmRjZ1pkejRiWVFDMnpSDQptZ1hJb1JzZXR1cnZxVHBpS2gwQytHQjVEOURPOEc0VjdvOWFqZnNOMzlFdWg5L1BYY1h4eFpkdERmZ3FlYmN3DQplekJyeW9ITUhha3RQVU5QeUhEUDZJSkdxMTY4L0JUNHVBTDdwdTRBOHBwalYzWFNlY21KcENCUE0yUlNlZ1dCDQpOWWZ3Vmp3amdjc3IwQzc3Rmo1Q0FQRExPK0NZazB5ajloSXo1QlJYS0htL1YwSTl4dHdwRUVjRWJaZXF3WmV2DQp6UlVkczVzWnZZVnV5bkRyVElNc2RLNGFSenRPTTcyRnJBUVpJZFNvSHNsbnBOTUhmNmIzeENjZElvM2dYN2I1DQpLL1lXZ1hIY1FNcE1PdDJlUHBybytDaUlHRDlyYmttakJsdGEyaVJCaVNQQlBvb2VEcGpVZVdYNE12MENBd0VBDQpBUUtDQWdBb0tYL2VNbkp6S2hTUnNCN2F5ckl4TURHSXhMQzBkS3phYnU5c3Fhd1RaWXlGelRBUjJYYVYwOFEyDQoxbHJ3UW0xMUtTd0VIZ0xKcmp4ZnZuY0FaOHJPZEQ1a0h6VHQzdUZOYmtHRXZSQ2VoSy9SOGNBQjNaZFdob3dPDQpIaEk1MWxLenZ2ZjJQRWpZNHNGQUhVaFJaZ3R2akkwb2Z4c1l1cE82Tkw1aDF6UENBbHR1TkN0c1BpSDJpdVlwDQpXRXdyVitSVGtnNGxiejAvUEFBY2NnWld1d3kwb3graDFPbGRQZUp1YTBjOTVudEk3NzYrMzZudnJaUXkrbjgxDQozU3NOOVlxNnVvSFM0UEhKTlczMHQ2eThxckFXcy84SmRUdm9sdVVaS1g0R3VkTmMyZk1DSkFvRldjczNacHJLDQpGZUpFb3FQQ1B4VDNoV1ltMkhNb2JrbmtpNW9kZnBoaUdHVHhBZGVHaVZOeTlZRHJQQWU3UU04SWx6Y0xKSDlnDQpXcjljUWpldDlGZ3ZzUCtxVUxHRUViSlN0TzdaNHFQYmdlWnZZYzVvZDFabzBjSmdXUVZZbDg5dmUxZTdSUDNIDQpkaE1sckhCbkpUMlhTSURiamlEZzN1UTlyWjB4aVFNaUVnMnhaRlBsYWtJdHlwWWF1Z1hac0FVUGh6eGRQQ05TDQp0NU9mUk9xMkJteDVrRTdyMHRxMEpGRWVpcmV6STNMUkVBL2pvZEtkL0VSTUQvT01GeFhWN1BNQWIyK2hlZkZkDQpKT1VkUUw2VWFyZHBMRFNYSmI3NE9tSlJiZzRlcHp4SmJUTnE2YWNHOFM2MlpHVmxYaGVWMXJKZ2wzUXUydnZEDQpod29MZjA5aUpnZzRjQXV4RGh3a2FESEtLeXowOEVoVlN6RDduYktXMmNoM2VNY0M1d0tDQVFFQTB0emNMeGNsDQpQNTgvWGNvZzdqRU5nZ0tTV0tDaEYyRUttSmxQbjlabFBTYkUrK094TElJNmkwSCtmeHVWbmVQVkdETGliRmowDQp6NmVUaVVWaDZ5ejQwdkp5cGM1N1lsY0w0YU95Rm1YS05hcFdzL2Mwdk9GbTRrTUkrTmJPbk85OVZCZlNFMFB1DQpibWxYZEV3WEhqbkhsSjVQMFU0UzR1UDU4aGNZekcydFVjQmR6M0J5a1c5NU0rcW1MZnBwT0sxRGEvYmtCZVRyDQo5dFhtMGdEdlNtY0NScHNJbjB5Qkp5SXdyYUltY0dCK0dQWXQxekhMdzJnRkdzeGdIOWhkLzhsNVdnRmh2OENUDQpnVTEvVE1iVWF2Zzd5WDJsaDB0aTlWR2xBMzA3OUN5YWh1NTJWNjJ4aVdEY0p0UGQyUUhtZm9BLzRWbnpJeHF2DQpUTldCTmVJWFR4aHJkd0tDQVFFQXpkMVJjQzBEdkhRd2dFOGdRSEJQZVp2bk1EVHd2ejQySE1GNGNYUzdMVXl0DQpEMFo2dnd1UkhKNm5RTjBJdnVmdmt3dTBqMlN3WS9iRlRVSWl4ZmQzT2VOOG5RZXFyUTFKenNucnRqb3VkZnViDQpPSzYwV01SM3ZHYTBDaEE5T3haa3VPbkc4b3BNQ3loc1NpWGI1T2NJSFN5dnNaNW1WUDg1bHZOYVJ3ZlhvbWtLDQpLbnV5c1I1a0RlYUF0VUdrdTZ2SmJxVllRT0JyU0dack0rSzFNcTdJNkZxT1FEUk4wOFo1V0N5YlpBUWxFL2loDQpSdHd4UFVLWGxYNFhjVVZmd1p1UmQzWUl5Vm9sYmlqNzUzb3BHZW42anRZWFh1YVNQbFJ0djlMNXJLazJPTlozDQpJNUdXbG9KY1ZWUmJ0NVZ6UTZmcGRnejQ5SXlOOVZEOHZGSXNnSkNLS3dLQ0FRQkt4dW9LaFJHL2l6REVpTzYrDQpxWVNaeTJHc3JtSVNVV2Faa1J6TW1SSlQ2bERHNXdzb3RwSWVXbXZ2RlpBc2F1Umg3WUdnWExlTWdHZndzVHMxDQpWRUIxUm1kajUyS1lFRGgxYjBDemNxdVA5blZDNHZLLzNNdEloKzlCbDZPendiWlhRUTlOcDdTQlVUZ2pWT3lKDQoyb0d0Y2FycWxkNWF1ZkFrYXc1dlNLSERNUTNUaDVRSmdWZWhFcUNXQTR5Vy9kTEFFZER4U2lwbjRaazJkZ0JtDQpDVHVrWUV4aGVaYi9rcjlpZy9OUHZOaGE3OHAzMnYvZ3J4M0lVQnZ5ang5ZW0wcytvT2pTUUcvTzFmWEQrMnJPDQorSEx6Vkd5RUd6YmZ1bkZqV0dFUGlWWFBiZmRueG9BRU1PWkJtcmE4dzFERElhWUZ1NGxldEpMZ0U0TDc0YzdVDQpUTnVuQW9JQkFRQ2J2WTlhdWZOVm91RCtjTjRKWWUzK0pqL2tiR2lsaGI4U1NodUFXYnN4TGd6T3ZaY202TzFEDQpKWk9Lc3Exbkg3aFRHa3ZqSDEyQ2dySUpITHVKNFFsRnRpQVQvRFRXN25La0NvWlVPZmZrTWhEZjlPdGpMRjhaDQpIT21mbzJGdlRpV3M3czhmdGhpSmFHOWtPUGYrVi9uL2VFc0NxTDdxRnB2TzR4T3RJUFcxWEpuZ1FleVJxbGd2DQpXKzZMTWJvYWNIL1hRU2RmRFdpY1FUOWc1V1lIamN0WVhRbTQ4TmpnR2dxNjlpUW9xaW9TemNuVS9jZ1NmRXFKDQpRZmNpTGtXZkJyNHFEaFhmbmw4cTA3NmZCQUFNSnNMelJHd3gwMlZYMmkrZEsxTFBtTVA0ZytkbDlVSmpZd1BQDQpXaDU0Nkl0bTU2VHJOaTB4ZFJRQVB1QzA1OFhiRFg0NUFvSUJBQUtEMHF1eC84TmJiUmVzclpmY1pzcDV5aGt0DQpUMERTeWNyNEdBYnkyYzZLZmNDZVh1bEJzR3UwK0VSUzYxNFI0SGhZbFRUOUo2MjZUa1VZNE1MMWtRM2l3RXJPDQo2ZXFqRldxYmU2d3ZmQVJwNnd0cDUxRG83OVBTRkJ1cGVuTXg2MS9qMHlyMUZtSENETWJqUDRnMkJGU0t3d2xhDQpJL3JGYVR4R2c0SWltem9saFdEUG9ad1l5N0d5MVhZQ1ByRUZxVmhVTlZqWXNnaEFyRDZsSE1uRVRXRFVua3NMDQpqSWUzMk0zY3J1VVVuNHpXTERtSHZ4dVV3SGxEc0NZT1V6QmFkc1BNYlJnajhoR09ZWm9hUGhHWFVxY1NZVW50DQpkQnZTRTZNMVZxcFl6a1BlOVRiMThzMS95ZjNKTlgrZFZBUWhyeHJnUTYzMjdkYktKQm5IblNQblpxOD0NCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;teste&quot;: &quot;100001&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/dto</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Hashmap" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-206537064">PROTOCOL</stringProp>
            <stringProp name="-937580831">BASE_URL</stringProp>
            <stringProp name="2461825">PORT</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1800854097">
              <stringProp name="2228360">HTTP</stringProp>
              <stringProp name="-1204607085">localhost</stringProp>
              <stringProp name="1716208">8080</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hashmap" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;chave&quot;: &quot;LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0NCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBcVpFb0VCR084SXdjL1V4a2ZFY1kNCitic29NdmJ0eVdySXBWQndOTXNIOFM4UEl5b3hjYmJVMGVzYTVvVk5lM0ViWlIyaGtnd0pxTW9wZ3JDUHFVd1MNCjN3SVpwc0VPODVIcTRPMy9lTjlrZ1RpcUhHQS9ZNzhTMkNEVU80R0N0Uk9veWxxTnhTMHFUQW4ycWN1K1RtMGsNCmY2NnNGSTI2SnlGdHowWDZVZUI2RCtxM1FRT01RNzRad1dTMFpVVUZJYU1ITUtJdDlJK1BLeExNYlpPTE52dXQNCmtSN0ZSMkVBaGFQck1SNEFmMm9Cc0dqQXpjdlpPNFZEV3VSRmdRaHEvS2RYVW9YRytmT29oeWd6MGlWSG83TkINCi8vd2k5RllVS3NMUks5N25QWlp2V1pVY242bGl2S2F0N2dsOGRBUmtpNEdDNjk1Z1BlcnZIOUNxMzZRMXRscWkNCnI5aTNXbHFBcjA5YWtOZGNnWmR6NGJZUUMyelJtZ1hJb1JzZXR1cnZxVHBpS2gwQytHQjVEOURPOEc0VjdvOWENCmpmc04zOUV1aDkvUFhjWHh4WmR0RGZncWViY3dlekJyeW9ITUhha3RQVU5QeUhEUDZJSkdxMTY4L0JUNHVBTDcNCnB1NEE4cHBqVjNYU2VjbUpwQ0JQTTJSU2VnV0JOWWZ3Vmp3amdjc3IwQzc3Rmo1Q0FQRExPK0NZazB5ajloSXoNCjVCUlhLSG0vVjBJOXh0d3BFRWNFYlplcXdaZXZ6UlVkczVzWnZZVnV5bkRyVElNc2RLNGFSenRPTTcyRnJBUVoNCklkU29Ic2xucE5NSGY2YjN4Q2NkSW8zZ1g3YjVLL1lXZ1hIY1FNcE1PdDJlUHBybytDaUlHRDlyYmttakJsdGENCjJpUkJpU1BCUG9vZURwalVlV1g0TXYwQ0F3RUFBUT09DQotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0NCgotLS0tLUJFR0lOIFJTQSBQUklWQVRFIEtFWS0tLS0tDQpNSUlKS0FJQkFBS0NBZ0VBcVpFb0VCR084SXdjL1V4a2ZFY1krYnNvTXZidHlXcklwVkJ3Tk1zSDhTOFBJeW94DQpjYmJVMGVzYTVvVk5lM0ViWlIyaGtnd0pxTW9wZ3JDUHFVd1Mzd0lacHNFTzg1SHE0TzMvZU45a2dUaXFIR0EvDQpZNzhTMkNEVU80R0N0Uk9veWxxTnhTMHFUQW4ycWN1K1RtMGtmNjZzRkkyNkp5RnR6MFg2VWVCNkQrcTNRUU9NDQpRNzRad1dTMFpVVUZJYU1ITUtJdDlJK1BLeExNYlpPTE52dXRrUjdGUjJFQWhhUHJNUjRBZjJvQnNHakF6Y3ZaDQpPNFZEV3VSRmdRaHEvS2RYVW9YRytmT29oeWd6MGlWSG83TkIvL3dpOUZZVUtzTFJLOTduUFpadldaVWNuNmxpDQp2S2F0N2dsOGRBUmtpNEdDNjk1Z1BlcnZIOUNxMzZRMXRscWlyOWkzV2xxQXIwOWFrTmRjZ1pkejRiWVFDMnpSDQptZ1hJb1JzZXR1cnZxVHBpS2gwQytHQjVEOURPOEc0VjdvOWFqZnNOMzlFdWg5L1BYY1h4eFpkdERmZ3FlYmN3DQplekJyeW9ITUhha3RQVU5QeUhEUDZJSkdxMTY4L0JUNHVBTDdwdTRBOHBwalYzWFNlY21KcENCUE0yUlNlZ1dCDQpOWWZ3Vmp3amdjc3IwQzc3Rmo1Q0FQRExPK0NZazB5ajloSXo1QlJYS0htL1YwSTl4dHdwRUVjRWJaZXF3WmV2DQp6UlVkczVzWnZZVnV5bkRyVElNc2RLNGFSenRPTTcyRnJBUVpJZFNvSHNsbnBOTUhmNmIzeENjZElvM2dYN2I1DQpLL1lXZ1hIY1FNcE1PdDJlUHBybytDaUlHRDlyYmttakJsdGEyaVJCaVNQQlBvb2VEcGpVZVdYNE12MENBd0VBDQpBUUtDQWdBb0tYL2VNbkp6S2hTUnNCN2F5ckl4TURHSXhMQzBkS3phYnU5c3Fhd1RaWXlGelRBUjJYYVYwOFEyDQoxbHJ3UW0xMUtTd0VIZ0xKcmp4ZnZuY0FaOHJPZEQ1a0h6VHQzdUZOYmtHRXZSQ2VoSy9SOGNBQjNaZFdob3dPDQpIaEk1MWxLenZ2ZjJQRWpZNHNGQUhVaFJaZ3R2akkwb2Z4c1l1cE82Tkw1aDF6UENBbHR1TkN0c1BpSDJpdVlwDQpXRXdyVitSVGtnNGxiejAvUEFBY2NnWld1d3kwb3graDFPbGRQZUp1YTBjOTVudEk3NzYrMzZudnJaUXkrbjgxDQozU3NOOVlxNnVvSFM0UEhKTlczMHQ2eThxckFXcy84SmRUdm9sdVVaS1g0R3VkTmMyZk1DSkFvRldjczNacHJLDQpGZUpFb3FQQ1B4VDNoV1ltMkhNb2JrbmtpNW9kZnBoaUdHVHhBZGVHaVZOeTlZRHJQQWU3UU04SWx6Y0xKSDlnDQpXcjljUWpldDlGZ3ZzUCtxVUxHRUViSlN0TzdaNHFQYmdlWnZZYzVvZDFabzBjSmdXUVZZbDg5dmUxZTdSUDNIDQpkaE1sckhCbkpUMlhTSURiamlEZzN1UTlyWjB4aVFNaUVnMnhaRlBsYWtJdHlwWWF1Z1hac0FVUGh6eGRQQ05TDQp0NU9mUk9xMkJteDVrRTdyMHRxMEpGRWVpcmV6STNMUkVBL2pvZEtkL0VSTUQvT01GeFhWN1BNQWIyK2hlZkZkDQpKT1VkUUw2VWFyZHBMRFNYSmI3NE9tSlJiZzRlcHp4SmJUTnE2YWNHOFM2MlpHVmxYaGVWMXJKZ2wzUXUydnZEDQpod29MZjA5aUpnZzRjQXV4RGh3a2FESEtLeXowOEVoVlN6RDduYktXMmNoM2VNY0M1d0tDQVFFQTB0emNMeGNsDQpQNTgvWGNvZzdqRU5nZ0tTV0tDaEYyRUttSmxQbjlabFBTYkUrK094TElJNmkwSCtmeHVWbmVQVkdETGliRmowDQp6NmVUaVVWaDZ5ejQwdkp5cGM1N1lsY0w0YU95Rm1YS05hcFdzL2Mwdk9GbTRrTUkrTmJPbk85OVZCZlNFMFB1DQpibWxYZEV3WEhqbkhsSjVQMFU0UzR1UDU4aGNZekcydFVjQmR6M0J5a1c5NU0rcW1MZnBwT0sxRGEvYmtCZVRyDQo5dFhtMGdEdlNtY0NScHNJbjB5Qkp5SXdyYUltY0dCK0dQWXQxekhMdzJnRkdzeGdIOWhkLzhsNVdnRmh2OENUDQpnVTEvVE1iVWF2Zzd5WDJsaDB0aTlWR2xBMzA3OUN5YWh1NTJWNjJ4aVdEY0p0UGQyUUhtZm9BLzRWbnpJeHF2DQpUTldCTmVJWFR4aHJkd0tDQVFFQXpkMVJjQzBEdkhRd2dFOGdRSEJQZVp2bk1EVHd2ejQySE1GNGNYUzdMVXl0DQpEMFo2dnd1UkhKNm5RTjBJdnVmdmt3dTBqMlN3WS9iRlRVSWl4ZmQzT2VOOG5RZXFyUTFKenNucnRqb3VkZnViDQpPSzYwV01SM3ZHYTBDaEE5T3haa3VPbkc4b3BNQ3loc1NpWGI1T2NJSFN5dnNaNW1WUDg1bHZOYVJ3ZlhvbWtLDQpLbnV5c1I1a0RlYUF0VUdrdTZ2SmJxVllRT0JyU0dack0rSzFNcTdJNkZxT1FEUk4wOFo1V0N5YlpBUWxFL2loDQpSdHd4UFVLWGxYNFhjVVZmd1p1UmQzWUl5Vm9sYmlqNzUzb3BHZW42anRZWFh1YVNQbFJ0djlMNXJLazJPTlozDQpJNUdXbG9KY1ZWUmJ0NVZ6UTZmcGRnejQ5SXlOOVZEOHZGSXNnSkNLS3dLQ0FRQkt4dW9LaFJHL2l6REVpTzYrDQpxWVNaeTJHc3JtSVNVV2Faa1J6TW1SSlQ2bERHNXdzb3RwSWVXbXZ2RlpBc2F1Umg3WUdnWExlTWdHZndzVHMxDQpWRUIxUm1kajUyS1lFRGgxYjBDemNxdVA5blZDNHZLLzNNdEloKzlCbDZPendiWlhRUTlOcDdTQlVUZ2pWT3lKDQoyb0d0Y2FycWxkNWF1ZkFrYXc1dlNLSERNUTNUaDVRSmdWZWhFcUNXQTR5Vy9kTEFFZER4U2lwbjRaazJkZ0JtDQpDVHVrWUV4aGVaYi9rcjlpZy9OUHZOaGE3OHAzMnYvZ3J4M0lVQnZ5ang5ZW0wcytvT2pTUUcvTzFmWEQrMnJPDQorSEx6Vkd5RUd6YmZ1bkZqV0dFUGlWWFBiZmRueG9BRU1PWkJtcmE4dzFERElhWUZ1NGxldEpMZ0U0TDc0YzdVDQpUTnVuQW9JQkFRQ2J2WTlhdWZOVm91RCtjTjRKWWUzK0pqL2tiR2lsaGI4U1NodUFXYnN4TGd6T3ZaY202TzFEDQpKWk9Lc3Exbkg3aFRHa3ZqSDEyQ2dySUpITHVKNFFsRnRpQVQvRFRXN25La0NvWlVPZmZrTWhEZjlPdGpMRjhaDQpIT21mbzJGdlRpV3M3czhmdGhpSmFHOWtPUGYrVi9uL2VFc0NxTDdxRnB2TzR4T3RJUFcxWEpuZ1FleVJxbGd2DQpXKzZMTWJvYWNIL1hRU2RmRFdpY1FUOWc1V1lIamN0WVhRbTQ4TmpnR2dxNjlpUW9xaW9TemNuVS9jZ1NmRXFKDQpRZmNpTGtXZkJyNHFEaFhmbmw4cTA3NmZCQUFNSnNMelJHd3gwMlZYMmkrZEsxTFBtTVA0ZytkbDlVSmpZd1BQDQpXaDU0Nkl0bTU2VHJOaTB4ZFJRQVB1QzA1OFhiRFg0NUFvSUJBQUtEMHF1eC84TmJiUmVzclpmY1pzcDV5aGt0DQpUMERTeWNyNEdBYnkyYzZLZmNDZVh1bEJzR3UwK0VSUzYxNFI0SGhZbFRUOUo2MjZUa1VZNE1MMWtRM2l3RXJPDQo2ZXFqRldxYmU2d3ZmQVJwNnd0cDUxRG83OVBTRkJ1cGVuTXg2MS9qMHlyMUZtSENETWJqUDRnMkJGU0t3d2xhDQpJL3JGYVR4R2c0SWltem9saFdEUG9ad1l5N0d5MVhZQ1ByRUZxVmhVTlZqWXNnaEFyRDZsSE1uRVRXRFVua3NMDQpqSWUzMk0zY3J1VVVuNHpXTERtSHZ4dVV3SGxEc0NZT1V6QmFkc1BNYlJnajhoR09ZWm9hUGhHWFVxY1NZVW50DQpkQnZTRTZNMVZxcFl6a1BlOVRiMThzMS95ZjNKTlgrZFZBUWhyeHJnUTYzMjdkYktKQm5IblNQblpxOD0NCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;teste&quot;: &quot;100001&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/hashmap</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hashmap Big Payload" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;chave&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;teste&quot;: &quot;100001&quot;,&#xd;
	&quot;1&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;2&quot;:&quot;TESTE&quot;,&#xd;
	&quot;3&quot;:&quot;TESTE&quot;,&#xd;
	&quot;4&quot;:&quot;TESTE&quot;,&#xd;
	&quot;5QUEBRAR&quot;:&quot;TESTE&quot;,&#xd;
	&quot;5&quot;:&quot;TESTE&quot;,&#xd;
	&quot;6RAQUEBRAR&quot;:&quot;TESTE&quot;,&#xd;
	&quot;6&quot;:&quot;TESTE&quot;,&#xd;
	&quot;7&quot;:&quot;TESTE&quot;,&#xd;
	&quot;8&quot;:&quot;TESTE&quot;,&#xd;
	&quot;9&quot;:&quot;TESTE&quot;,&#xd;
	&quot;10RAQUEBRAR&quot;:&quot;TESTE&quot;,&#xd;
	&quot;11&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;12&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;13&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;14&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;15&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;16&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;17&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;18&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;19&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;20&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;21&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;,&#xd;
	&quot;22&quot;: &quot;BQUklWQVRFIEtFWS0tLS0tDQo=&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/hashmap</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
